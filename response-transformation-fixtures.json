{
  "timestamp": "2025-07-10T19:30:00.000Z",
  "source": "Generated for presentation demo",
  "transformationFunctions": {
    "venturesResponseTransformer": {
      "name": "transformVenturesResponse",
      "description": "Transforms paginated ventures response to legacy array format",
      "input": "Paginated ventures response with edges/nodes",
      "output": "Legacy ventures array format",
      "code": "function transformVenturesResponse(response) {\n  if (!response?.user?.ventures) return response;\n  \n  const ventures = response.user.ventures;\n  \n  // Already in legacy format\n  if (Array.isArray(ventures)) return response;\n  \n  // Transform paginated to legacy array\n  return {\n    ...response,\n    user: {\n      ...response.user,\n      ventures: ventures.edges?.map(edge => ({\n        ...edge.node,\n        // Handle nested transformations\n        name: edge.node.name || edge.node.displayName,\n        logoUrl: edge.node.profile?.logoUrl || edge.node.logoUrl,\n        displayName: edge.node.name // For backward compatibility\n      })) || []\n    }\n  };\n}",
      "testInput": {
        "user": {
          "__typename": "User",
          "ventures": {
            "pageInfo": {
              "hasNextPage": true,
              "endCursor": "cursor123"
            },
            "edges": [
              {
                "node": {
                  "__typename": "Venture",
                  "id": "venture-1",
                  "name": "My Business",
                  "profile": {
                    "logoUrl": "https://example.com/logo.png"
                  }
                }
              }
            ]
          }
        }
      },
      "expectedOutput": {
        "user": {
          "__typename": "User",
          "ventures": [
            {
              "__typename": "Venture",
              "id": "venture-1",
              "name": "My Business",
              "displayName": "My Business",
              "logoUrl": "https://example.com/logo.png",
              "profile": {
                "logoUrl": "https://example.com/logo.png"
              }
            }
          ]
        }
      }
    },
    "fieldMappingTransformer": {
      "name": "transformFieldNames", 
      "description": "Handles field name transformations for backward compatibility",
      "input": "Response with new field names",
      "output": "Response with legacy field names added",
      "code": "function transformFieldNames(obj) {\n  if (!obj || typeof obj !== 'object') return obj;\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => transformFieldNames(item));\n  }\n  \n  const transformed = { ...obj };\n  \n  // Handle name -> displayName\n  if (transformed.name && !transformed.displayName) {\n    transformed.displayName = transformed.name;\n  }\n  \n  // Handle profile.logoUrl -> logoUrl flattening\n  if (transformed.profile?.logoUrl && !transformed.logoUrl) {\n    transformed.logoUrl = transformed.profile.logoUrl;\n  }\n  \n  // Recursively transform nested objects\n  Object.keys(transformed).forEach(key => {\n    transformed[key] = transformFieldNames(transformed[key]);\n  });\n  \n  return transformed;\n}",
      "testInput": {
        "id": "venture-1",
        "name": "My Business",
        "profile": {
          "logoUrl": "https://example.com/logo.png"
        }
      },
      "expectedOutput": {
        "id": "venture-1", 
        "name": "My Business",
        "displayName": "My Business",
        "logoUrl": "https://example.com/logo.png",
        "profile": {
          "logoUrl": "https://example.com/logo.png"
        }
      }
    },
    "typenameRemover": {
      "name": "removeTypenames",
      "description": "Removes __typename fields if legacy code doesn't expect them",
      "input": "Response with __typename fields",
      "output": "Response without __typename fields",
      "code": "function removeTypenames(obj) {\n  if (!obj || typeof obj !== 'object') return obj;\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => removeTypenames(item));\n  }\n  \n  const cleaned = { ...obj };\n  delete cleaned.__typename;\n  \n  // Recursively clean nested objects\n  Object.keys(cleaned).forEach(key => {\n    cleaned[key] = removeTypenames(cleaned[key]);\n  });\n  \n  return cleaned;\n}",
      "testInput": {
        "__typename": "User",
        "id": "user-1",
                "ventures": [
                  {
                    "__typename": "Venture",
                    "id": "venture-1",
                    "name": "My Business"
                  }
                ]
              },
              "expectedOutput": {
                "id": "user-1",
                "ventures": [
                  {
                    "id": "venture-1",
                    "name": "My Business"
                  }
                ]
              }
            }
          }
        }