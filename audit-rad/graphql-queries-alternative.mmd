```mermaid
graph LR

    subgraph AddGEMSubscribers
        1["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData',
      'gem.subscriberCount',
      'links.addSubscribers'
    ])
  ))`"]
    end

    subgraph Task-Upgrade-RemoveAds
        2["`profile => {
  const {
    request: {
      query: {
        ventureId,
        appLocation
      } = {}
    } = {}
  } = profile || {};
  
  let tabPath = 'venture/upgrade/plan';

  const entityData = profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'features.websiteType',
      'vnextAccount.billing.termType',
	  'vnextAccount.billing.autoRenew',
	  'vnextAccount.account.paymentStatus',
      'vnextAccount.billing.commitment',
      'vnextAccount.ventureId'
    ])
  ));
  
  if(appLocation && appLocation === 'uvh-dashboard-website') {
    tabPath = 'venture/website/upgrade/plan';
  }
  
  if (ventureId) {
    return [{
      ...entityData[0],
      ventureId,
      tabPath
    }]
  }
  else {
    return [{
      ...entityData[0],
      ventureId: entityData[0].vnextAccount.ventureId,
      tabPath
    }]
  }
    
  return [];
}`"]
    end

    subgraph AddMoreProducts
        3["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData.current.commerce',
      'vnextAccount.billing.commitment',
      'features.published',
      'links.olsAddProducts',
      'ols.products.count',
      'ols.setup_status',
      'ols.store_status'
    ])
  ))`"]
    end

    subgraph Task-SubscriptionsCouponOrInsights
        4["`(profile) => {
  const site = profile.entities.find(
    ({
      type = '',
      features: {
        websiteType
      } = {}
    }) =>
      type === 'wsbvnext' && websiteType === 'gocentral'
  );
 
 
  if(site) {
    const widgets = site.features?.widgets || [];
    const accountId = site.accountId;
	const path = widgets.includes('SUBSCRIBE') ? 'editsection' : 'addsection'
  	return [{
      id: site.id,
      accountId: site.accountId,
      type: site.type,
      path
    }]
  }

  return []
};`"]
    end

    subgraph RAD Task-PromoteAppointmentService-EBVqroHvQ
        5["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData',
      'features.websiteType',
      'features.widgets',
      'ola.service.total',
      'gem.lastIgPostDate',
      'gem.lastFbPostDate'
    ])
  ))`"]
    end

    subgraph ReadBlogging
        6["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'blog',
      'entitlementData.current.blog',
      'features.published',
      'features.websiteType'
    ])
  ))`"]
    end

    subgraph DoEmailGEMCampaign - Social Tile
        7["`profile => {
  return [];
}`"]
    end

    subgraph Local-1
        8["`profile => joinEntities(profile.entities, profile.entities, (a, b) => (
  a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
)).map(entity => {
  return entityPick(entity, [
    'mktgasst.id',
    'mktgasst.type',
    'wsbvnext.id',
    'wsbvnext.type',
    'wsbvnext.accountId',
    'wsbvnext.customerIntentions'
  ])
})`"]
    end

    subgraph AddHeaderImage
        9["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'features.published',
      'features.widgets',
      'features.websiteType'
    ])
  ))`"]
    end

    subgraph GetNoticed-1
        10["`profile => joinEntities(profile.entities, profile.entities, (a, b) => (
  a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
)).map(entity => {
  return entityPick(entity, [
    'mktgasst.id',
    'mktgasst.type',
    'wsbvnext.id',
    'wsbvnext.type',
    'wsbvnext.accountId',
    'wsbvnext.customerIntentions'
  ])
})`"]
    end

    subgraph AddLogo
        11["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'features.userAddedLogo',
      'features.websiteType'
    ])
  ))`"]
    end

    subgraph AddShopLocal
        12["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'id',
      'accountId',
      'customerIntentions',
      'entitlementData',
      'features.widgets',
      'features.websiteType',
      'ols.products.count'
    ])
  ))`"]
    end

    subgraph Task-ChatLearnMore
        13["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'id',
      'accountId'
    ])
  ))`"]
    end

    subgraph SetupOLAPaymentsV2
        14["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'vnextAccount.account.paymentStatus',
      'vnextAccount.billing.commitment',
      'accountId',
      'customerIntentions',
      'ola.online_payment.status',
    ])
  ))`"]
    end

    subgraph UploadYelpPhotos
        15["`profile => profile.entities
  .filter(entity => entity.type === 'mktgasst')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'id',
      'features.yelp.hasYelpPublished'
    ])
  ))`"]
    end

    subgraph PostToFacebook-Holiday - Sales Tile
        16["`profile => {
  return [];
}`"]
    end

    subgraph Add video to website
        17["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'id',
      'accountId',
      'features.widgets',
      'features.websiteType'
    ])
  ))`"]
    end

    subgraph DIFY Photo Shoot
        18["`profile => [{ type:"none", id:"always"}]`"]
    end

    subgraph Appointments-1
        19["`profile => joinEntities(profile.entities, profile.entities, (a, b) => (
  a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
)).map(entity => {
  return entityPick(entity, [
    'mktgasst.id',
    'mktgasst.type',
    'wsbvnext.id',
    'wsbvnext.type',
    'wsbvnext.accountId',
    'wsbvnext.customerIntentions'
  ])
})`"]
    end

    subgraph Task-ConnectSocialChannels
        20["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'id',
      'accountId'
    ])
  ))`"]
    end

    subgraph RAD Task-WaysToSell-VTk695TTb
        21["`profile => {
  const {
    request: {
      query: {
        ventureId
      } = {}
    } = {}
  } = profile || {};
  if (ventureId) {
    return [{
      id: 'none',
      type: 'always show',
      ventureId
    }];
  }
  
  return [];
}`"]
    end

    subgraph FinishOLASetup
        22["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData',
      'ola.account.status'
    ])
  ))`"]
    end

    subgraph AddOLAWidget
        23["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'customerIntentions',
      'entitlementData',
      'features.widgets',
      'features.websiteType'
    ])
  ))`"]
    end

    subgraph Facebook Booking feature in OLA
        24["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => entityPick(entity, [
    'id',
    'accountId',
    'type',
    'entitlementData.current',
    'entitlementData.transitionable',
    'features.published',
    'features.websiteType',
    'vnextAccount.shopperId',
    'ola.service.total',
    'ola.account.status',
    'ola.facebook_booking.status'
  ]))`"]
    end

    subgraph DmFull-SocialEmail-1
        25["`profile => joinEntities(profile.entities, profile.entities, (a, b) => (
  a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
)).map(entity => {
  return entityPick(entity, [
    'wsbvnext.id',
    'wsbvnext.type',
    'wsbvnext.accountId',
    'wsbvnext.customerIntentions',
    'wsbvnext.features'
  ])
})`"]
    end

    subgraph RAD Task-DIFY-n6n0grUBR
        26["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId'
    ])
  ))`"]
    end

    subgraph DoFirstBlog - Site Visitors
        27["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'id',
      'blog',
      'entitlementData.current',
      'features.websiteType',
      'links.composeCampaign'
    ])
  ))`"]
    end

    subgraph AddWidgetContent
        28["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'features.widgets',
      'features.websiteType'
    ])
  ))`"]
    end

    subgraph Add10MoreProducts
        29["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData.current.commerce',
      'links.olsAddProducts'
    ])
  ))`"]
    end

    subgraph AddBlogWidget
        30["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData',
      'features.websiteType',
      'features.widgets',
      'links.blog'
    ])
  ))`"]
    end

    subgraph RAD Task-GoDaddyConversations-LoeR11kT~
        31["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'id',
      'accountId',
      'entitlementData.current.conversations',
      'entitlementData.current["conversations.lite"]'
    ])
  ))`"]
    end

    subgraph DoStartSEO 
        32["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData',
       'sev.hasActivated',
      'links.sev',
      'vnextAccount.billing.commitment'
    ])
  ))`"]
    end

    subgraph Task-CustomizeChatWidget
        33["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'id',
      'accountId'
    ])
  ))`"]
    end

    subgraph DoEmailGEMCampaign
        34["`profile => {
  return [];
}`"]
    end

    subgraph AddMarketplaceProducts - Orders Tile
        35["`profile => {
  return [];
}`"]
    end

    subgraph AddWidgetContactUs
        36["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'features.published',
      'features.widgets',
      'features.websiteType'
    ])
  ))`"]
    end

    subgraph SetupO365
        37["`profile => {
  return [];
}`"]
    end

    subgraph Task-ConnectSocialMediaChannels
        38["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'id',
      'accountId'
    ])
  ))`"]
    end

    subgraph AddAppointments
        39["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'customerIntentions',
      'ola.service.total'
    ])
  ))`"]
    end

    subgraph PoyntSetup
        40["`(profile) => {
   const uceEntity = profile.entities.find(entity => entity.type === 'uce');

  const siteWithCommerce = profile.entities.find(
    ({
      type = '',
      id = '',
      entitlementData: {
        current: {
          ucc
        } = {}
      } = {}
    }) => {
      const ols = uceEntity?.features?.ols;
      const status = ols?.status;
      const isProvisioned = id && status && status !== 'NOT_PROVISIONED';
      return type === 'wsbvnext' && isProvisioned
    }
  );
 
 
  if(siteWithCommerce) {
    const {
      features: {
        payments: {
          metadata: {
            processing_account: {
              businessId,
              paymentsEnabled,
              riskDecision,
              applicationStatus
            } = {}
          } = {}
        } = {}
      } = {}
    } = uceEntity || {};
    
    const isCompleted = !!(
      businessId ||
      paymentsEnabled ||
      (riskDecision && riskDecision !== "PENDING") ||
      (applicationStatus && applicationStatus !== "INCOMPLETE")
    );

  	return [{
      id: siteWithCommerce.id,
      type: siteWithCommerce.type,
      poyntLink: siteWithCommerce.links?.poyntSetup,
      isCompleted
    }]
  }

  return []
};`"]
    end

    subgraph ConnectGMB
        41["`profile => {

  const mktgasst = profile.entities
    .filter(entity => entity.type === 'mktgasst')
    .map(entity => (
      entityPick(entity, [
        'id',
        'features.gmb.hasGMBStarted',
        'features.gmb.hasSubmittedToOneSpace',
        'features.gmb.hasGMBOnlineBusiness',
        'links.gmbLaunch',
        'type',
         'wsbvnext.customerIntentions'
      ])
    ));

  const wsbVnext = profile.entities
    .filter(entity => entity.type === 'wsbvnext')
    .map(entity => (
      entityPick(entity, [
        'accountId',
        'entitlementData',
        'features.published',
        'features.websiteType',
        'type',
        'features.planType'
      ])
    ));

  return joinEntities(mktgasst, wsbVnext, (a, b) => (
    a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
  ));
}`"]
    end

    subgraph PostToFacebook - Sales Tile
        42["`profile => {
  return [];
}`"]
    end

    subgraph Task-EnableWebsiteChatbot
        43["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'id',
      'accountId'
    ])
  ))`"]
    end

    subgraph AddCustomDomain
        44["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'domainName',
      'features.externalDomainName',
      'features.websiteType',
      'vnextAccount.billing.commitment'
    ])
  ))`"]
    end

    subgraph Task-MO-Social-Post-Create
        45["`profile => {
  const vnextgraphEntity = profile.entities.find(e => e.type === 'vnextgraph');
  const wsbvnextEntity = profile.entities.find(e => e.type === 'wsbvnext');
  
  return [{
    id: wsbvnextEntity.id,
    type: wsbvnextEntity.type,
	ventureId: wsbvnextEntity.vnextAccount.ventureId
  }];
}`"]
    end

    subgraph DoFirstBlog - Social Views
        46["`profile => {
  return [];
}`"]
    end

    subgraph ConnectYelp
        47["`profile => {

  const mktgasst = profile.entities
    .filter(entity => entity.type === 'mktgasst')
    .map(entity => (
      entityPick(entity, [
        'id',
        'features.yelp.hasCompletedYelpFlow',
        'links.yelpLaunch',
        'type'
      ])
    ));

  const wsbVnext = profile.entities
    .filter(entity => entity.type === 'wsbvnext')
    .map(entity => (
      entityPick(entity, [
        'accountId',
        'entitlementData',
        'features.published',
        'features.websiteType',
        'type',
        'features.planType'
      ])
    ));

  return joinEntities(mktgasst, wsbVnext, (a, b) => (
    a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
  ));
}`"]
    end

    subgraph AddImportContacts
        48["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'id',
      'entitlementData',
      'contacts'
    ])
  ))`"]
    end

    subgraph AddCustomDomain - Orders Tile
        49["`profile => {
  return [];
}`"]
    end

    subgraph WriteAnotherBlog
        50["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'blog',
      'entitlementData.current.appointments',
      'entitlementData.current.blog',
      'features.published',
      'features.websiteType',
      'ola.account.status',
      'ola.service.total'
    ])
  ))`"]
    end

    subgraph RemovePlaceHolderText
        51["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'links.editorDirect',
      'customerIntentions'
    ])
  ))`"]
    end

    subgraph ProductsLocal-1
        52["`profile => joinEntities(profile.entities, profile.entities, (a, b) => (
  a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
)).map(entity => {
  return entityPick(entity, [
    'mktgasst.id',
    'mktgasst.type',
    'wsbvnext.id',
    'wsbvnext.type',
    'wsbvnext.accountId',
    'wsbvnext.customerIntentions'
  ])
})`"]
    end

    subgraph Task-ConnectSocialAccounts
        53["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId'
    ])
  ))`"]
    end

    subgraph DoStartSEO 
        54["`profile => {
  return [];
}`"]
    end

    subgraph AddBusinessInfo
        55["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData',
      'features.websiteType',
      'ola.service.total',
      'ola.account.has_business_address'
    ])
  ))`"]
    end

    subgraph Task-AboutSection copy of editor/Task-AboutSection-rGj0ov19r
        56["`(profile) => {
  const site = profile.entities.find(
    ({
      type = '',
      features: {
        websiteType
      } = {}
    }) =>
      type === 'wsbvnext' && websiteType === 'gocentral'
  );

  if(site) {
    const widgets = site.features?.widgets || [];
    const accountId = site.accountId;
	const path = widgets.includes('ABOUT') ? 'editsection' : 'addsection';
  	return [{
      id: site.id,
      accountId: site.accountId,
      type: site.type,
      path
    }]
  }

  return []
};`"]
    end

    subgraph AddProducts - Orders Tile
        57["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData',
      'links.olsAddProducts',
      'ols.products.count'
    ])
  ));`"]
    end

    subgraph PostProductOnFacebook
        58["`profile => {
  const {
    request: {
      query: {
        appLocation,
        ventureId
      } = {}
    } = {}
  } = profile || {};

  const mktgasst = profile.entities
    .filter(entity => entity.type === 'mktgasst')
    .map(entity => (
      entityPick(entity, [
        'id',
        'features.facebook.pageId',
        'type'
      ])
    ));

  const wsbVnext = profile.entities
    .filter(entity => entity.type === 'wsbvnext')
    .map(entity => (
      entityPick(entity, [
        'accountId',
        'entitlementData.current',
        'gem.lastFbPostDate',
        'type',
        'features.businessCategoryGroup'
      ])
    ));

  
  const entities = joinEntities(mktgasst, wsbVnext, (a, b) => (
    a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
  ));

  if (appLocation === 'uvh-dashboard' && ventureId && ventureId !== 'undefined') {
    return [{
      ...entities[0],
      appLocation,
      path: `/venture/composer/fb/product?ventureId=${ventureId}`,
      ventureId
    }];
  }
  return [{
    ...entities[0],
    appLocation,
    path: `/account/${entities[0].wsbvnext.accountId}/composer/fb/product`
  }];
}`"]
    end

    subgraph HolidayTips
        59["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData.used',
      'features.published',
      'ols.products.count'
    ])
  ));`"]
    end

    subgraph SetupOLANotifications
        60["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'vnextAccount.account.paymentStatus',
      'accountId',
      'customerIntentions',
      'entitlementData',
      'ola.account.status',
      'ola.calendar_sync.status',
      'ola.notifications.c1_sms'
    ])
  ))`"]
    end

    subgraph AddProducts - Sales Tile
        61["`profile => {
  return [];
}`"]
    end

    subgraph Task-GetMobileApp
        62["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'id',
      'accountId'
    ])
  ))`"]
    end

    subgraph BoostFacebookPost - Sales Tile
        63["`profile => {

  const mktgasst = profile.entities
    .filter(entity => entity.type === 'mktgasst')
    .map(entity => (
      entityPick(entity, [
        'id',
        'type'
      ])
    ));

  const wsbVnext = profile.entities
    .filter(entity => entity.type === 'wsbvnext')
    .map(entity => (
      entityPick(entity, [
        'accountId',
        'entitlementData.current',
        'features.businessCategory',
        'type',
        'gem.lastFbPostDate'
      ])
    ));

  return joinEntities(mktgasst, wsbVnext, (a, b) => (
    a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
  ));
}`"]
    end

    subgraph Task-ConnectEmail
        64["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'id',
      'accountId'
    ])
  ))`"]
    end

    subgraph OLACalendarSyncV2
        65["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'vnextAccount.account.paymentStatus',
      'vnextAccount.billing.commitment',
      'accountId',
      'customerIntentions',
      'entitlementData',
      'ola.account.status',
      'ola.calendar_sync.status',
      'ola.service.total'
    ])
  ))`"]
    end

    subgraph ListService
        66["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData',
      'features.websiteType',
      'ola.service.total'
    ])
  ))`"]
    end

    subgraph UpdateHours
        67["`profile => joinEntities(profile.entities, profile.entities, (a, b) => (
  a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
)).map(entity => {
  return entityPick(entity, [
    'mktgasst.id',
    'mktgasst.type',
    'wsbvnext.id',
    'wsbvnext.type',
    'mktgasst.features.facebook.isConnected',
    'mktgasst.features.gmb.hasGMBPublished',
    'mktgasst.features.yelp.hasYelpPublished',
  ])
})`"]
    end

    subgraph ProductsApptsLocal-1
        68["`profile => joinEntities(profile.entities, profile.entities, (a, b) => (
  a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
)).map(entity => {
  return entityPick(entity, [
    'mktgasst.id',
    'mktgasst.type',
    'wsbvnext.id',
    'wsbvnext.type',
    'wsbvnext.accountId',
    'wsbvnext.customerIntentions'
  ])
})`"]
    end

    subgraph PostToFacebook-Holiday - Social Tile
        69["`profile => {
  return [];
}`"]
    end

    subgraph DoEmailGEMCampaign
        70["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData',
      'gem.hasSent',
      'gem.subscriberCount',
      'links.composeCampaign',
      'features.planType'
    ])
  ))`"]
    end

    subgraph DmFull-Social-1
        71["`profile => joinEntities(profile.entities, profile.entities, (a, b) => (
  a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
)).map(entity => {
  return entityPick(entity, [
    'wsbvnext.id',
    'wsbvnext.type',
    'wsbvnext.accountId',
    'wsbvnext.customerIntentions',
    'wsbvnext.features'
  ])
})`"]
    end

    subgraph ConnectGoogleChannel
        72["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'type',
      'features.published',
      'entitlementData.current',
      'ols.products.count',
      'links.olsMarketplace',
      'account.planType'
    ])
  ));`"]
    end

    subgraph DIFY-placeholderguidance group
        73["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData',
      'features.published',
    ])
  ));`"]
    end

    subgraph AddPhotoGallery
        74["`profile => {
  const wsbVnext = profile.entities
    .filter(entity => entity.type === 'wsbvnext')
    .map(entity => (
      entityPick(entity, [
        'accountId',
        'features.widgets',
        'features.websiteType',
        'type',
        'features.planType'
      ])
    ));

  const mktgasst = profile.entities
    .filter(entity => entity.type === 'mktgasst')
    .map(entity => (
      entityPick(entity, [
        'id',
        'features.facebook.isConnected',
        'features.facebook.pageId',
        'features.gmb.hasGMBPublished',
        'features.yelp.hasYelpPublished',
        'type'
      ])
    ));

  return joinEntities(mktgasst, wsbVnext, (a, b) => (
    a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
  ));
}`"]
    end

    subgraph Task-Upgrade-GetSEO
        75["`profile => {
  const {
    request: {
      query: {
        ventureId,
        appLocation
      } = {}
    } = {}
  } = profile || {};
  
  let tabPath = 'venture/upgrade/plan';

  const entityData = profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'features.websiteType',
      'vnextAccount.billing.termType',
	  'vnextAccount.billing.autoRenew',
	  'vnextAccount.account.paymentStatus',
      'vnextAccount.billing.commitment',
      'vnextAccount.ventureId'
    ])
  ));
  
  if(appLocation && appLocation === 'uvh-dashboard-website') {
    tabPath = 'venture/website/upgrade/plan';
  }
  
  if (ventureId) {
    return [{
      ...entityData[0],
      ventureId,
      tabPath
    }]
  }
  else {
    return [{
      ...entityData[0],
      ventureId: entityData[0].vnextAccount.ventureId,
      tabPath
    }]
  }
  
  return [];
}`"]
    end

    subgraph PostProductOnFacebook - Orders Tile
        76["`profile => {
  return [];
}`"]
    end

    subgraph Task-DIYSocialAds-Google
        77["`profile => [{ type:"none", id:"always"}]`"]
    end

    subgraph AddShop
        78["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'id',
      'accountId',
      'customerIntentions',
      'entitlementData',
      'features.widgets',
      'features.websiteType',
      'ols.products.count'
    ])
  ))`"]
    end

    subgraph ProductReviewsOn
        79["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'vnextAccount.account.paymentStatus',
      'vnextAccount.billing.commitment',
      'accountId',
      'entitlementData',
      'ols.features_enabled.product_reviews'
    ])
  ))`"]
    end

    subgraph Add download widget to website
        80["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'id',
      'accountId',
      'features.widgets',
      'features.websiteType'
    ])
  ))`"]
    end

    subgraph Task-DIFY-Tier0RequestACall
        81["`profile => 
  joinEntities(profile.entities, entity => entity.type === 'wsbvnext') 
    .map(entity => entityPick(entity, ['wsbvnext.features.published', 'id', 'accountId', 'wsbvnext.entitlementData.current.website', 'wsbvnext.id', 'wsbvnext.type', 'wsbvnext.accountId','wsbvnext.features.planType']))`"]
    end

    subgraph AddMoreServicesOLA
        82["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData.current.appointments',
      'vnextAccount.billing.commitment',
      'features.websiteType',
      'ola.account.status'
    ])
  ))`"]
    end

    subgraph Task-OptimizeSEOKeywords
        83["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData',
       'sev.hasActivated',
      'links.sev',
      'vnextAccount.billing.commitment'
    ])
  ))`"]
    end

    subgraph ReadFBPractices
        84["`profile => {

  const mktgasst = profile.entities
    .filter(entity => entity.type === 'mktgasst')
    .map(entity => (
      entityPick(entity, [
        'id',
        'features.facebook.pageId',
        'features.facebook.socialWidgetData.pageURL',
        'type'
      ])
    ));

  const wsbVnext = profile.entities
    .filter(entity => entity.type === 'wsbvnext')
    .map(entity => (
      entityPick(entity, [
        'accountId',
        'entitlementData',
        'type'
      ])
    ));

  return joinEntities(mktgasst, wsbVnext, (a, b) => (
    a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
  ));
}`"]
    end

    subgraph C19EmailMarketing
        85["`profile => joinEntities(profile.entities, profile.entities, (a, b) => (
  a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
)).map(entity => {
  return entityPick(entity, [
    'wsbvnext.id',
    'wsbvnext.type',
    'wsbvnext.accountId',
    'wsbvnext.customerIntentions',
    'wsbvnext.features',
    'wsbvnext.accountCreationListingId'
  ])
})`"]
    end

    subgraph SetupOLSShipping
        86["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData',
      'links.olsAddShipping'
    ])
  ));`"]
    end

    subgraph EmailSubscriberWebformC19
        87["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData',
      'gem.hasSent',
      'gem.subscriberCount',
      'links.composeCampaign',
      'features.planType'
    ])
  ))`"]
    end

    subgraph BoostFacebookPost - Social Views
        88["`profile => {
  return [];
}`"]
    end

    subgraph SetupO365
        89["`profile => {
  return [];
}`"]
    end

    subgraph ProductsGoal-1
        90["`profile => joinEntities(profile.entities, profile.entities, (a, b) => (
  a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
)).map(entity => {
  return entityPick(entity, [
    'mktgasst.id',
    'mktgasst.type',
    'wsbvnext.id',
    'wsbvnext.type',
    'wsbvnext.accountId',
    'wsbvnext.customerIntentions'
  ])
})`"]
    end

    subgraph PostToFacebook - Social Tile
        91["`profile => {
  return [];
}`"]
    end

    subgraph UploadSocialPhotosV2
        92["`profile => joinEntities(profile.entities, profile.entities, (a, b) => (
  a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
)).map(entity => {
  return entityPick(entity, [
    'mktgasst.id',
    'mktgasst.type',
    'mktgasst.features.facebook.isConnected',
    'mktgasst.features.gmb.hasGMBPublished',
    'mktgasst.features.yelp.hasYelpPublished',
    'mktgasst.features.yelp.hasYelpApprovedClaim',
    'wsbvnext.id',
    'wsbvnext.type'
  ])
})`"]
    end

    subgraph RAD Task-AddAboutUs-liZueQkbU
        93["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'features.widgets',
      'features.websiteType'
    ])
  ))`"]
    end

    subgraph Task-CustomizeWebChat
        94["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'id',
      'accountId'
    ])
  ))`"]
    end

    subgraph Task-UploadImages copy of editor/Task-UploadImages-UwqChf4FO
        95["`(profile) => {
  const site = profile.entities.find(
    ({
      type = '',
      features: {
        websiteType
      } = {}
    }) =>
      type === 'wsbvnext' && websiteType === 'gocentral'
  );
 
 
  if(site) {
    const widgets = site.features?.widgets || [];
    const accountId = site.accountId;
	const path = widgets.includes('GALLERY') ? 'editsection' : 'addsection'
  	return [{
      id: site.id,
      accountId: site.accountId,
      type: site.type,
      path
    }]
  }

  return []
};`"]
    end

    subgraph DIFY-CompleteSocialAd
        96["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData',
      'features.published',
    ])
  ));`"]
    end

    subgraph AddMarketplaces
        97["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'vnextAccount.account.paymentStatus',
      'accountId',
      'entitlementData',
      'links.olsMarketplace',
      'ols.marketplace_data',
      'ols.products.count',
      'vnextAccount.billing.commitment'
    ])
  ))`"]
    end

    subgraph SetupOLS
        98["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'blog',
      'entitlementData.current.commerce',
      'ols.setup_status'
    ])
  ))`"]
    end

    subgraph DIFY-RequestSiteEdit
        99["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData',
      'features.published',
      'features.planType'
    ])
  ));`"]
    end

    subgraph AddMarketplaces - Orders Tile
        100["`profile => {
  return [];
}`"]
    end

    subgraph Add video to website
        101["`profile => {
  return [];
}`"]
    end

    subgraph GetNoticedLocal-1
        102["`profile => joinEntities(profile.entities, profile.entities, (a, b) => (
  a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
)).map(entity => {
  return entityPick(entity, [
    'mktgasst.id',
    'mktgasst.type',
    'wsbvnext.id',
    'wsbvnext.type',
    'wsbvnext.features.published',
    'wsbvnext.accountId',
    'wsbvnext.customerIntentions'
  ])
})`"]
    end

    subgraph ConnectGoogleChannel - Sales Tile
        103["`profile => {
  return [];
}`"]
    end

    subgraph DIYSocialAds - Social Views
        104["`profile => {
  return [];
}`"]
    end

    subgraph Add menu widget to website
        105["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'id',
      'accountId',
      'features.widgets',
      'features.websiteType'
    ])
  ))`"]
    end

    subgraph Task-AddContactUs
        106["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'id',
      'accountId'
    ])
  ))`"]
    end

    subgraph PostToFacebook-Holiday
        107["`profile => {
  const {
    request: {
      query: {
        appLocation,
        ventureId
      } = {}
    } = {}
  } = profile || {};

  const mktgasst = profile.entities
    .filter(entity => entity.type === 'mktgasst')
    .map(entity => (
      entityPick(entity, [
        'id',
        'features.facebook.pageId',
        'type'
      ])
    ));

  const wsbVnext = profile.entities
    .filter(entity => entity.type === 'wsbvnext')
    .map(entity => (
      entityPick(entity, [
        'accountId',
        'entitlementData.current',
        'gem.lastFbPostDate',
        'type',
        'features.businessCategoryGroup'
      ])
    ));
  
  const entities = joinEntities(mktgasst, wsbVnext, (a, b) => (
    a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
  ));

  if (appLocation === 'uvh-dashboard' && ventureId && ventureId !== 'undefined') {
    return [{
      ...entities[0],
      appLocation,
      path: `/venture/composer/over?ventureId=${ventureId}&overSearchTerm=holiday+season`,
      ventureId
    }];
  }
  
  return [{
    ...entities[0],
    appLocation,
    path: `/account/${entities[0].wsbvnext.accountId}/composer/over?overSearchTerm=holiday+season`
  }];
}`"]
    end

    subgraph CreateYelpAds
        108["`profile => {

  const mktgasst = profile.entities
    .filter(entity => entity.type === 'mktgasst')
    .map(entity => (
      entityPick(entity, [
        'id',
        'features.yelp.hasCompletedYelpFlow',
        'links.yelpLaunch',
        'type'
      ])
    ));

  const wsbVnext = profile.entities
    .filter(entity => entity.type === 'wsbvnext')
    .map(entity => (
      entityPick(entity, [
        'accountId',
        'entitlementData',
        'features.published',
        'features.websiteType',
        'type',
        'features.planType'
      ])
    ));

  return joinEntities(mktgasst, wsbVnext, (a, b) => (
    a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
  ));
}`"]
    end

    subgraph PublishStore 
        109["`(profile) => {
  const uceEntity = profile.entities.find(entity => entity.type === 'uce');
  
  const siteWithCommerce = profile.entities.find(
    ({
      type = '',
      id = '',
      entitlementData: {
        current: {
          ucc
        } = {}
      } = {},
      customerIntentions: {
        'onlineStore.channel.ols': olsIntent,
        'onlineStore.channel.inPerson': inPersonIntent,
         preloaded: {
         	'onlineStore.channel.ols': olsIntentPreloaded,
            'onlineStore.channel.inPerson': inPersonIntentPreloaded
         } = {}
      } = {}
    }) => {
      const hasOLSIntent = olsIntent || olsIntentPreloaded;
      const hasInPersonIntent = inPersonIntent || inPersonIntentPreloaded;
      const ols = uceEntity?.features?.ols;
      const status = ols?.status;
      const isProvisioned = id && status && status !== 'NOT_PROVISIONED';
      const skipProvisionCheck = hasInPersonIntent && !hasOLSIntent;
      return type === 'wsbvnext' && (hasOLSIntent || (!skipProvisionCheck && isProvisioned))
    }
  );
 
 
  if(siteWithCommerce) {
  	return [{
      id: siteWithCommerce.id,
      type: siteWithCommerce.type,
      websiteId: siteWithCommerce.id,
      features: {
        published: siteWithCommerce.features?.published
      }
    }]
  }

  return []
};`"]
    end

    subgraph Task-ConnectSocialAccounts
        110["`profile => {
  return profile.entities
    .filter(entity => entity.type === 'vnextgraph')
    .map(entity => {
      const entitlements = entity.entitlementData?.current;

      const isCompleted = (
        entitlements?.['socialMediaManager.fb.connect'] === true ||
        entitlements?.['socialMediaManager.gmb.connect'] === true ||
        entitlements?.['socialMediaManager.yelp.connect'] === true ||
        entitlements?.['socialMediaManager.instagram'] === true ||
        entitlements?.['socialMediaManager.twitter'] === true
      );

      return {
        type: entity.type,
        id: entity.data?.website?.id || '',
        accountId: entity.data?.website?.accountId || '',
        status: isCompleted ? 'completed' : 'incomplete',
        score: isCompleted ? 0 : 10,
        entitlements: entitlements
      };
    });
}`"]
    end

    subgraph SellInPerson
        111["`module.exports = (profile) => {
  const uceEntity = profile.entities.find(entity => entity.type === 'uce');

  const siteWithCommerce = profile.entities.find(
    ({
      type = '',
      id = '',
      entitlementData: {
        current: {
          ucc
        } = {}
      } = {},
    }) => {
      const ols = uceEntity && uceEntity.features && uceEntity.features.ols;
      const status = ols && ols.status;
      const isProvisioned = id && status && status !== 'NOT_PROVISIONED';
      return type === 'wsbvnext' && isProvisioned;
    }
  );

  if (siteWithCommerce) {
    return [{
      id: siteWithCommerce.id,
      type: siteWithCommerce.type,
      websiteId: siteWithCommerce.id,
      commerceSellInPersonLink: siteWithCommerce ?.links ?.commerceSellInPerson,
      uceTerminals: uceEntity ?.features ?.payments ?.metadata ?.terminals
    }]
  };
  
  return [];
};`"]
    end

    subgraph SetupOLSCoupons
        112["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'vnextAccount.account.paymentStatus',
      'vnextAccount.billing.commitment',
      'accountId',
      'customerIntentions',
      'entitlementData',
      'features.published'
    ])
  ))`"]
    end

    subgraph AbandonedCartOn
        113["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'ols.features_enabled.abandoned_cart',
      'entitlementData.current.commerce'
    ])
  ))`"]
    end

    subgraph PublishWebsiteV2
        114["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'features.published',
      'features.websiteType',
      'links.preview',
      'links.editorDirect'
    ])
  ))`"]
    end

    subgraph UploadGMBPhotos
        115["`profile => {

  const mktgasst = profile.entities
    .filter(entity => entity.type === 'mktgasst')
    .map(entity => (
      entityPick(entity, [
        'id',
        'features.gmb.hasGMBPublished',
        'features.gmb.photos.counts',
        'links.gmbLaunchPhotos',
        'type'
      ])
    ));

  const wsbVnext = profile.entities
    .filter(entity => entity.type === 'wsbvnext')
    .map(entity => (
      entityPick(entity, [
        'accountId',
        'entitlementData',
        'features.published',
        'features.websiteType',
        'type'
      ])
    ));

  return joinEntities(mktgasst, wsbVnext, (a, b) => (
    a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
  ));
}`"]
    end

    subgraph AppointmentsLocal-1
        116["`profile => joinEntities(profile.entities, profile.entities, (a, b) => (
  a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
)).map(entity => {
  return entityPick(entity, [
    'mktgasst.id',
    'mktgasst.type',
    'wsbvnext.id',
    'wsbvnext.type',
    'wsbvnext.accountId',
    'wsbvnext.customerIntentions'
  ])
})`"]
    end

    subgraph ConnectFacebook
        117["`profile => {

  const mktgasst = profile.entities
    .filter(entity => entity.type === 'mktgasst')
    .map(entity => (
      entityPick(entity, [
        'id',
        'features.facebook.isConnected',
        'features.facebook.pageId',
        'links.fbPageCreate',
        'type'
      ])
    ));

  const wsbVnext = profile.entities
    .filter(entity => entity.type === 'wsbvnext')
    .map(entity => (
      entityPick(entity, [
        'accountId',
        'entitlementData',
        'type',
        'features.planType'
      ])
    ));

  return joinEntities(mktgasst, wsbVnext, (a, b) => (
    a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
  ));
}`"]
    end

    subgraph HolidayTips
        118["`profile => {
  return [];
}`"]
    end

    subgraph ConnectInstagram
        119["`profile => joinEntities(profile.entities, profile.entities, (a, b) => (
  a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
)).map(entity => {
  return entityPick(entity, [
    'mktgasst.id',
    'mktgasst.type',
    'wsbvnext.id',
    'wsbvnext.type',
    'wsbvnext.entitlementData.current',
    'mktgasst.features.instagram.isConnected',
    'wsbvnext.features.planType'
  ])
})`"]
    end

    subgraph ImportSubscribersC19
        120["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData',
      'gem.subscriberCount',
      'links.addSubscribers',
      'id',
      'features.planType'
    ])
  ))`"]
    end

    subgraph PostProductOnGMB
        121["`profile => {

  const mktgasst = profile.entities
    .filter(entity => entity.type === 'mktgasst')
    .map(entity => (
      entityPick(entity, [
        'id',
        'features.gmb.hasGMBLocation',
        'features.gmb.hasGMBPublished',
        'type'
      ])
    ));

  const wsbVnext = profile.entities
    .filter(entity => entity.type === 'wsbvnext')
    .map(entity => (
      entityPick(entity, [
        'vnextAccount.account.paymentStatus',
        'vnextAccount.billing.commitment',
        'accountId',
        'entitlementData.current',
        'features.published',
        'ols.featured_products_with_images',
        'type'
      ])
      
    ));

  return joinEntities(mktgasst, wsbVnext, (a, b) => (
    a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
  ));
}`"]
    end

    subgraph DIFY-RequestSocialPost
        122["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData',
      'features.published',
    ])
  ));`"]
    end

    subgraph DmFull-SocialLocal-1
        123["`profile => joinEntities(profile.entities, profile.entities, (a, b) => (
  a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
)).map(entity => {
  return entityPick(entity, [
    'wsbvnext.id',
    'wsbvnext.type',
    'wsbvnext.accountId',
    'wsbvnext.customerIntentions',
    'wsbvnext.features'
  ])
})`"]
    end

    subgraph DmFull-SocialLocalEmail-1
        124["`profile => joinEntities(profile.entities, profile.entities, (a, b) => (
  a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
)).map(entity => {
  return entityPick(entity, [
    'wsbvnext.id',
    'wsbvnext.type',
    'wsbvnext.accountId',
    'wsbvnext.customerIntentions',
    'wsbvnext.features'
  ])
})`"]
    end

    subgraph ProductsAppts-1
        125["`profile => joinEntities(profile.entities, profile.entities, (a, b) => (
  a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
)).map(entity => {
  return entityPick(entity, [
    'mktgasst.id',
    'mktgasst.type',
    'wsbvnext.id',
    'wsbvnext.type',
    'wsbvnext.accountId',
    'wsbvnext.customerIntentions'
  ])
})`"]
    end

    subgraph Task-Marketing-Checklist
        126["`profile => {
  const {
    request: {
      query: {
        ventureId
      } = {}
    } = {}
  } = profile || {};
  if (ventureId) {
    return [{
      id: 'none',
      type: 'always show',
      ventureId
    }];
  }
  
  return [];
}`"]
    end

    subgraph AddMarketplaceProducts
        127["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'vnextAccount.account.paymentStatus',
      'vnextAccount.billing.commitment',
      'accountId',
      'entitlementData',
      'links.olsMarketplace',
      'ols.marketplace_data'
    ])
  ))`"]
    end

    subgraph FirstEmailCampaignC19
        128["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData',
      'gem.hasSent',
      'gem.subscriberCount',
      'links.composeCampaign',
      'features.planType'
    ])
  ))`"]
    end

    subgraph Task-FacebookAds-Direct
        129["`profile => {

  const mktgasst = profile.entities
    .filter(entity => entity.type === 'mktgasst')
    .map(entity => (
      entityPick(entity, [
        'id',
        'features.facebook.isConnected',
        'features.facebook.pageId',
        'links.fbAdsDirect',
        'type'
      ])
    ));

  const wsbVnext = profile.entities
    .filter(entity => entity.type === 'wsbvnext')
    .map(entity => (
      entityPick(entity, [
        'accountId',
        'entitlementData',
        'features.published',
        'features.websiteType',
        'type'
      ])
    ));

  return joinEntities(mktgasst, wsbVnext, (a, b) => (
    a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
  ));
}`"]
    end

    subgraph AddSocialLinksWidget
        130["`profile => {
  const wsbVnext = profile.entities
    .filter(entity => entity.type === 'wsbvnext')
    .map(entity => (
      entityPick(entity, [
        'accountId',
        'features.widgets',
        'features.websiteType',
        'type'
      ])
    ));

  const mktgasst = profile.entities
    .filter(entity => entity.type === 'mktgasst')
    .map(entity => (
      entityPick(entity, [
        'id',
        'features.facebook.isConnected',
        'features.facebook.pageId',
        'features.gmb.hasGMBPublished',
        'features.yelp.hasYelpPublished',
        'type',
        'features.planType'
      ])
    ));

  return joinEntities(mktgasst, wsbVnext, (a, b) => (
    a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
  ));
}`"]
    end

    subgraph PostToFacebook
        131["`profile => {
  const {
    request: {
      query: {
        appLocation,
        ventureId
      } = {}
    } = {}
  } = profile || {};

  const mktgasst = profile.entities
    .filter(entity => entity.type === 'mktgasst')
    .map(entity => (
      entityPick(entity, [
        'id',
        'type'
      ])
    ));

  const wsbVnext = profile.entities
    .filter(entity => entity.type === 'wsbvnext')
    .map(entity => (
      entityPick(entity, [
        'accountId',
        'entitlementData.current',
        'type',
        'gem.lastIgPostDate',
        'gem.lastFbPostDate',
        'features.planType'
      ])
    ));
  
  const entities = joinEntities(mktgasst, wsbVnext, (a, b) => (
    a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
  ));

  if (appLocation === 'uvh-dashboard' && ventureId && ventureId !== 'undefined') {
    return [{
      ...entities[0],
      appLocation,
      path: `/venture/composer/fb/website?ventureId=${ventureId}`,
      ventureId
    }];
  }

  return [{
    ...entities[0],
    appLocation,
    path: `/account/${entities[0].wsbvnext.accountId}/composer/fb/website`
  }];
}`"]
    end

    subgraph Task-ConnectYourEmail
        132["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'id',
      'accountId'
    ])
  ))`"]
    end

    subgraph DIYSocialAds
        133["`profile => {

  const mktgasst = profile.entities
    .filter(entity => entity.type === 'mktgasst')
    .map(entity => (
      entityPick(entity, [
        'id',
        'type',
        'features.facebook.isConnected'
      ])
    ));

  const wsbVnext = profile.entities
    .filter(entity => entity.type === 'wsbvnext')
    .map(entity => (
      entityPick(entity, [
        'accountId',
        'entitlementData.current',
        'features.businessCategory',
        'type'
      ])
    ));

  return joinEntities(mktgasst, wsbVnext, (a, b) => (
    a.type === 'mktgasst' && b.type === 'wsbvnext' && a.id === b.accountId
  ));
}`"]
    end

    subgraph SetupO365
        134["`profile => joinEntities(profile.entities, profile.entities, (a, b) => (
  a.type === 'wsbvnext' && b.type === 'o365' && a?.vnextAccount?.shopperId === b?.shopper?.shopperId
)).map(entity => {
  return entityPick(entity, [
    'o365.id',
    'o365.shopper.shopperId',
    'o365.states.activated',
    'wsbvnext.accountId',
    'wsbvnext.features.id',
    'wsbvnext.features.websiteType',
    'wsbvnext.id',
    'wsbvnext.type',
    'wsbvnext.vnextAccount.billing.commitment',
    'wsbvnext.vnextAccount.shopperId'
  ])
})`"]
    end

    subgraph Task-NeverMissMessage
        135["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'id',
      'accountId'
    ])
  ))`"]
    end

    subgraph ConnectGMB - Appointments Tile
        136["`profile => {
  return [];
}`"]
    end

    subgraph Task-ContactSection copy of editor/Task-ContactSection-mvjt_1kC6
        137["`(profile) => {
  const site = profile.entities.find(
    ({
      type = '',
      features: {
        websiteType
      } = {}
    }) =>
      type === 'wsbvnext' && websiteType === 'gocentral'
  );
 
 
  if(site) {
    const widgets = site.features?.widgets || [];
    const accountId = site.accountId;
	const path = widgets.includes('CONTACT') ? 'editsection' : 'addsection'
  	return [{
      id: site.id,
      accountId: site.accountId,
      type: site.type,
      path 
    }]
  }

  return []
};`"]
    end

    subgraph AddProductsLocal
        138["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'entitlementData',
      'links.olsAddProducts',
      'ols.products.count'
    ])
  ));`"]
    end

    subgraph SetupOLSPayment
        139["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'vnextAccount.account.paymentStatus',
      'vnextAccount.billing.commitment',
      'accountId',
      'entitlementData',
      'links.olsAddPayment',
      'ols.payment_methods.available'
    ])
  ))`"]
    end

    subgraph Task-HeaderCTAtoContact
        140["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'id',
      'accountId'
    ])
  ))`"]
    end

    subgraph ChooseTheme
        141["`profile => profile.entities
  .filter(entity => entity.type === 'wsbvnext')
  .map(entity => (
    entityPick(entity, [
      'accountId',
      'features.websiteType'
    ])
  ))`"]
    end

    subgraph PublishWebsiteV2
        142["`profile => {
  return [];
}`"]
    end

    subgraph ExploreHub
        143["`(profile) => {
  const uceEntity = profile.entities.find(entity => entity.type === 'uce');

  const siteWithCommerce = profile.entities.find(
    ({
      type = '',
      id = '',
      entitlementData: {
        current: {
          ucc
        } = {}
      } = {}
    }) => {
      const ols = uceEntity?.features?.ols;
      const status = ols?.status;
      const isProvisioned = id && status && status !== 'NOT_PROVISIONED';
      return type === 'wsbvnext' && isProvisioned;
    }
  );
 
 
  if(siteWithCommerce) {
  	return [{
      id: siteWithCommerce.id,
      type: siteWithCommerce.type,
      commerceHubLink: siteWithCommerce.links?.commerceHub
    }]
  }

  return []
};`"]
    end

    subgraph Task-ViewMySubscribers
        144["`(profile) => {
  const site = profile.entities.find(
    ({
      type = '',
      features: {
        websiteType
      } = {}
    }) =>
      type === 'wsbvnext' && websiteType === 'gocentral'
  );
 
  if(site) {
    const ventureId = site.vnextAccount?.ventureId;
  	return [{
      id: ventureId,
      ventureId: ventureId,
      type: 'projects'
    }]
  }

  return [{
    id: '0',
    type: 'error'
  }]
};`"]
    end
```
